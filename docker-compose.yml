
services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    healthcheck:
      test: [ "CMD-SHELL","pg_isready -U admin" ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - ecommerce-net
  temporal:
    image: temporalio/auto-setup:latest
    ports:
      - "7233:7233"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecommerce-net
  order-service:
    build:
      context: .
      dockerfile: order-service/Dockerfile
    ports: ["8081:8081"]
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/quarkusOrderDb
      QUARKUS_DATASOURCE_USERNAME: quarkusOrderDb
      QUARKUS_DATASOURCE_PASSWORD: sab@12345
      TEMPORAL_TARGET: temporal:7233
      QUARKUS_HTTP_PORT: "8081"
    depends_on:
      temporal: { condition: service_started }
      postgres: { condition: service_healthy }
    networks: [ecommerce-net]

  payment-service:
    build:
      context: .
      dockerfile: payment-service/Dockerfile
    ports: ["8082:8082"]
    environment:
      TEMPORAL_TARGET: temporal:7233
      QUARKUS_HTTP_PORT: "8082"
    depends_on:
      temporal: { condition: service_started }
    networks: [ecommerce-net]

  inventory-service:
    build:
      context: .
      dockerfile: inventory-service/Dockerfile
    ports: ["8083:8083"]
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/quarkusInventoryDb
      QUARKUS_DATASOURCE_USERNAME: quarkusInventoryDb
      QUARKUS_DATASOURCE_PASSWORD: sab@12345
      TEMPORAL_TARGET: temporal:7233
      QUARKUS_HTTP_PORT: "8083"
    depends_on:
      temporal: { condition: service_started }
      postgres: { condition: service_healthy }
    networks: [ecommerce-net]

  shipping-service:
    build:
      context: .
      dockerfile: shipping-service/Dockerfile
    ports: ["8084:8084"]
    environment:
      TEMPORAL_TARGET: temporal:7233
      QUARKUS_HTTP_PORT: "8084"
    depends_on:
      temporal: { condition: service_started }
    networks: [ecommerce-net]


networks:
  ecommerce-net:
    driver: bridge




